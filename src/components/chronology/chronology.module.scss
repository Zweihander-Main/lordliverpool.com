@use '~styles/util/variables.global' as v;
@use '~styles/util/mixins.global' as m;
@use '~styles/util/functions.global' as f;
@use 'sass:color';

$card-height: v.$card-height;
$card-width: v.$card-width;
$card-margin: 100px;
$filter-menu-height: 60px;
$filter-menu-height-small: 45px;
$timeline-height: 90px;
$card-top-margin: 40px;
$card-bottom-margin: 25px;

// TODO -- JS for touch scrolling sideways

.chronology {
	background-color: v.$blue-bg;
	display: grid;
	grid-template-columns: 100%;
	grid-template-rows: $filter-menu-height 1fr $timeline-height;
	height: 100vh;
	position: fixed;
	width: 100vw; // TODO check on mobile -- silly height overrun thing

	@include m.media('portrait') {
		grid-template-rows: $filter-menu-height 1fr;
		height: 100%;
		min-height: 100vh;
		// position: static; //TODO confirm

		@include m.media('<=desktop') {
			grid-template-rows: $filter-menu-height-small 1fr;
		}
	}

	@include m.media('landscape', '<=desktop') {
		grid-template-rows: $filter-menu-height-small 1fr $timeline-height;
	}

	// TODO -- initial scroll trouble
}

.filter-menu {
	@include m.neumorphic-intensity(
		7px,
		14px,
		v.$blue-bg,
		60%
	); // TODO consistency in terms of intensity, shadow spread, ect.

	align-items: center;
	border-bottom: 1px solid color.adjust(v.$blue-bg, $lightness: 8%);
	border-radius: 0 0 v.$border-radius * 2 v.$border-radius * 2; //TODO border radius in some other unit or proportional to the size?
	color: v.$white;
	display: flex;
	flex-direction: row;
	grid-row: 1;
	justify-content: space-around;
	margin: 0 250px; //TODO nope -- redo grid as well
	transition: 100ms v.$timing-function;
	z-index: 9;
	// TODO adjust based on new menu size when you resize it

	@include m.media('<=ultrawide') {
		margin: 0 200px;
	}

	@include m.media('<=wide') {
		margin: 0 100px;
	}

	@include m.media('<=desktop') {
		margin: 0 4.5rem;
	}

	@include m.media('<=tablet') {
		background: #051926;
		display: flex;
		flex-direction: column;
		height: max-content;
		min-height: 100%;
		overflow-y: hidden;
		position: relative;
		top: 0;
		z-index: 99999;
	}
}

.filter-menu-mobile {
	align-items: center;
	display: flex;
	flex-direction: row;
	justify-content: space-around;
	transition: 100ms v.$timing-function; //TODO -- logic to 150ms?
	width: 100%;

	@include m.media('<=tablet') {
		box-sizing: content-box;
		display: block;
		height: 0;
		margin: 0 auto;
		padding: 0;
		text-align: center;
		transform: translateY(-100vh);
		width: max-content;
		will-change: transform;

		.filter-menu-link {
			margin-top: 0.5rem;
		}
	}
}

.filter-menu-link {
	@include m.header-normal;

	border-radius: v.$border-radius;
	cursor: pointer;
	margin: 0;
	padding: 0.6rem 2rem;
	transition: 100ms v.$timing-function; // TODO consistency on button transition
	z-index: 999;

	@include m.media('<=desktop') {
		//TODO this should apply below a certain height as well, possibly under wide
		font-size: 1.05rem; //TODO var
		padding: 0.5rem 1rem;
	}

	@include m.media('<=tablet') {
		margin: 0 auto;
		width: max-content;
	}

	&:hover {
		@include m.neumorphic-button(
			3px,
			6px,
			#051926,
			55%
		); // TODO shadow -- button consistency
	}
}

.selected-link,
.filter-menu-input:checked ~ .filter-menu-button-container > .filter-menu-link {
	@include m.neumorphic-button(-3px, 6px, #051926, 60%);

	color: v.$light-bg;

	&:hover {
		@include m.neumorphic-button(-3px, 6px, #051926, 60%);
	}
}

.filter-menu-input {
	display: none;

	@include m.media('<=tablet') {
		&:checked ~ .filter-menu-mobile {
			height: 100%;
			padding: 0 0 1rem;
			transform: translateY(0);
		}
	}
}

.filter-menu-button-container {
	display: none;

	@include m.media('<=tablet') {
		display: block;
	}
}

.card-container-wrapper {
	@include m.hide-scrollbars;

	grid-row: 2;
	height: 100vw;
	min-width: 100vh;
	overflow-x: hidden;
	overflow-y: scroll;
	padding-right: 45px;
	position: absolute;
	top: $card-top-margin;
	transform: rotate(-90deg) translateX(-100vh);
	transform-origin: top left;
	will-change: scroll-position;
	z-index: -1;

	@include m.media('portrait') {
		min-height: 100%;
		min-width: auto;
		overflow-x: hidden;
		overflow-y: scroll;
		padding-right: 0;
		position: relative;
		top: 0;
		transform: initial;
		width: 100vw;
	}
}

.card-container {
	align-items: center;
	display: flex;
	flex-direction: row;
	transform: rotate(90deg) translateY(-100vh);
	transform-origin: top left;

	@include m.media('portrait') {
		align-items: initial;
		flex-direction: column;
		transform: initial;
	}
}

.buffer {
	height: $card-height; //TODO fix
	width: 10vw; //TODO is this right?

	@include m.media('portrait') {
		height: 45px; //TODO keep?:w
		width: 80vw; //TODO var
	}
}
